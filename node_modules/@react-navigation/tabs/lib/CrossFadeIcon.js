'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TabBarIcon = function (_React$Component) {
  _inherits(TabBarIcon, _React$Component);

  function TabBarIcon() {
    _classCallCheck(this, TabBarIcon);

    return _possibleConstructorReturn(this, (TabBarIcon.__proto__ || Object.getPrototypeOf(TabBarIcon)).apply(this, arguments));
  }

  _createClass(TabBarIcon, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          route = _props.route,
          activeOpacity = _props.activeOpacity,
          inactiveOpacity = _props.inactiveOpacity,
          activeTintColor = _props.activeTintColor,
          inactiveTintColor = _props.inactiveTintColor,
          renderIcon = _props.renderIcon,
          style = _props.style;

      // We render the icon twice at the same position on top of each other:
      // active and inactive one, so we can fade between them.

      return _react2.default.createElement(
        _reactNative.View,
        { style: style },
        _react2.default.createElement(
          _reactNative.Animated.View,
          { style: [styles.icon, { opacity: activeOpacity }] },
          renderIcon({
            route: route,
            focused: true,
            tintColor: activeTintColor
          })
        ),
        _react2.default.createElement(
          _reactNative.Animated.View,
          { style: [styles.icon, { opacity: inactiveOpacity }] },
          renderIcon({
            route: route,
            focused: false,
            tintColor: inactiveTintColor
          })
        )
      );
    }
  }]);

  return TabBarIcon;
}(_react2.default.Component);

exports.default = TabBarIcon;


var styles = _reactNative.StyleSheet.create({
  icon: {
    // We render the icon twice at the same position on top of each other:
    // active and inactive one, so we can fade between them:
    // Cover the whole iconContainer:
    position: 'absolute',
    alignSelf: 'center',
    alignItems: 'center',
    justifyContent: 'center',
    height: '100%',
    width: '100%',
    // Workaround for react-native >= 0.54 layout bug
    minWidth: 25
  }
});